{"version":3,"sources":["Button.tsx"],"names":["React","useCallback","useMemo","useState","StyleSheet","View","Surface","Text","ActivityIndicator","Pressable","usePaletteColor","useSurfaceScale","useStyles","useAnimatedElevation","Button","title","leading","trailing","variant","color","tintColor","compact","disableElevation","uppercase","loading","loadingIndicatorPosition","loadingIndicator","style","pressableContainerStyle","contentContainerStyle","titleStyle","leadingContainerStyle","trailingContainerStyle","loadingOverlayContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","surfaceScale","p","hex","contentColor","on","main","hasLeading","hasTrailing","styles","shapes","container","backgroundColor","outline","small","borderWidth","borderColor","pressableContainer","overflow","pressable","minWidth","height","flexDirection","justifyContent","alignItems","paddingStart","paddingEnd","textTransform","opacity","leadingContainer","marginEnd","trailingContainer","marginStart","loadingOverlayContainer","absoluteFillObject","getTitle","getLoadingIndicator","getLeading","size","getTrailing","hovered","setHovered","handleMouseEnter","event","handleMouseLeave","pressed","setPressed","handlePressIn","handlePressOut","animatedElevation","absoluteFill"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,SAIEC,UAJF,EAOEC,IAPF,QASO,cATP;AAUA,OAAOC,OAAP,MAAsC,WAAtC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,SAAP,MAA0C,aAA1C;AACA,SAAgBC,eAAhB,QAAuC,2BAAvC;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,oBAAT,QAAqC,gCAArC;;AAoHA,MAAMC,MAA6B,GAAG,QAyChC;AAAA,MAzCiC;AACrCC,IAAAA,KADqC;AAErCC,IAAAA,OAFqC;AAGrCC,IAAAA,QAHqC;AAIrCC,IAAAA,OAAO,GAAG,WAJ2B;AAKrCC,IAAAA,KAAK,GAAG,SAL6B;AAMrCC,IAAAA,SANqC;AAOrCC,IAAAA,OAAO,GAAG,KAP2B;AAQrCC,IAAAA,gBAAgB,GAAG,KARkB;AASrCC,IAAAA,SAAS,GAAG,IATyB;AAUrCC,IAAAA,OAAO,GAAG,KAV2B;AAWrCC,IAAAA,wBAAwB,GAAG,SAXU;AAYrCC,IAAAA,gBAZqC;AAcrCC,IAAAA,KAdqC;AAerCC,IAAAA,uBAfqC;AAgBrCC,IAAAA,qBAhBqC;AAiBrCC,IAAAA,UAjBqC;AAkBrCC,IAAAA,qBAlBqC;AAmBrCC,IAAAA,sBAnBqC;AAoBrCC,IAAAA,4BApBqC;AAsBrCC,IAAAA,WAtBqC;AAuBrCC,IAAAA,gBAvBqC;AAwBrCC,IAAAA,OAxBqC;AAyBrCC,IAAAA,SAzBqC;AA0BrCC,IAAAA,UA1BqC;AA2BrCC,IAAAA,WA3BqC;AA4BrCC,IAAAA,MA5BqC;AA6BrCC,IAAAA,OA7BqC;AA8BrCC,IAAAA,YA9BqC;AA+BrCC,IAAAA,YA/BqC;AAgCrCC,IAAAA,cAhCqC;AAiCrCC,IAAAA,QAjCqC;AAkCrCC,IAAAA,OAlCqC;AAmCrCC,IAAAA,oBAnCqC;AAoCrCC,IAAAA,oBApCqC;AAqCrCC,IAAAA,cArCqC;AAsCrCC,IAAAA,gBAtCqC;AAwCrC,OAAGC;AAxCkC,GAyCjC;AACJ,QAAMC,YAAY,GAAGzC,eAAe,EAApC;AAEA,QAAM0C,CAAC,GAAG3C,eAAe,CACvBmC,QAAQ,GAAGO,YAAY,CAAC,IAAD,CAAZ,CAAmBE,GAAnB,EAAH,GAA8BnC,KADf,EAEvB0B,QAAQ,GAAGO,YAAY,CAAC,IAAD,CAAZ,CAAmBE,GAAnB,EAAH,GAA8BlC,SAFf,CAAzB;AAKA,QAAMmC,YAAY,GAAGrD,OAAO,CAC1B,MAAOgB,OAAO,KAAK,WAAZ,GAA0BmC,CAAC,CAACG,EAA5B,GAAiCX,QAAQ,GAAGQ,CAAC,CAACG,EAAL,GAAUH,CAAC,CAACI,IADlC,EAE1B,CAACvC,OAAD,EAAUmC,CAAV,EAAaR,QAAb,CAF0B,CAA5B;AAKA,QAAMa,UAAU,GAAGxD,OAAO,CACxB,MAAM,CAAC,CAACc,OAAF,IAAcQ,OAAO,IAAIC,wBAAwB,KAAK,SADpC,EAExB,CAACT,OAAD,EAAUQ,OAAV,EAAmBC,wBAAnB,CAFwB,CAA1B;AAKA,QAAMkC,WAAW,GAAGzD,OAAO,CACzB,MAAM,CAAC,CAACe,QAAF,IAAeO,OAAO,IAAIC,wBAAwB,KAAK,UADpC,EAEzB,CAACR,QAAD,EAAWO,OAAX,EAAoBC,wBAApB,CAFyB,CAA3B;AAKA,QAAMmC,MAAM,GAAGhD,SAAS,CACtB;AAAA,QAAC;AAAEiD,MAAAA;AAAF,KAAD;AAAA,WAAiB;AACfC,MAAAA,SAAS,EAAE;AACTC,QAAAA,eAAe,EAAE7C,OAAO,KAAK,WAAZ,GAA0BmC,CAAC,CAACI,IAA5B,GAAmC;AAD3C,OADI;AAIfO,MAAAA,OAAO,EAAE,EACP,GAAGH,MAAM,CAACI,KADH;AAEPC,QAAAA,WAAW,EAAE,CAFN;AAGPC,QAAAA,WAAW,EAAEf,YAAY,CAAC,IAAD,CAAZ,CAAmBE,GAAnB;AAHN,OAJM;AASfc,MAAAA,kBAAkB,EAAE,EAClB,GAAGP,MAAM,CAACI,KADQ;AAElBI,QAAAA,QAAQ,EAAE;AAFQ,OATL;AAafC,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE,EADD;AAETC,QAAAA,MAAM,EAAE,EAFC;AAGTC,QAAAA,aAAa,EAAE,KAHN;AAITC,QAAAA,cAAc,EAAE,QAJP;AAKTC,QAAAA,UAAU,EAAE,QALH;AAMTC,QAAAA,YAAY,EAAElB,UAAU,GAAIrC,OAAO,GAAG,CAAH,GAAO,EAAlB,GAAwBA,OAAO,GAAG,CAAH,GAAO,EANrD;AAOTwD,QAAAA,UAAU,EAAElB,WAAW,GAAItC,OAAO,GAAG,CAAH,GAAO,EAAlB,GAAwBA,OAAO,GAAG,CAAH,GAAO;AAPpD,OAbI;AAsBfS,MAAAA,UAAU,EAAE;AACVgD,QAAAA,aAAa,EAAEvD,SAAS,GAAG,WAAH,GAAiB,MAD/B;AAEVwD,QAAAA,OAAO,EAAEvD,OAAO,IAAIC,wBAAwB,KAAK,SAAxC,GAAoD,CAApD,GAAwD;AAFvD,OAtBG;AA0BfuD,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,SAAS,EAAE5D,OAAO,GAAG,CAAH,GAAO,CADT;AAEhB0D,QAAAA,OAAO,EAAEvD,OAAO,IAAIC,wBAAwB,KAAK,SAAxC,GAAoD,CAApD,GAAwD;AAFjD,OA1BH;AA8BfyD,MAAAA,iBAAiB,EAAE;AACjBC,QAAAA,WAAW,EAAE9D,OAAO,GAAG,CAAH,GAAO,CADV;AAEjB0D,QAAAA,OAAO,EAAEvD,OAAO,IAAIC,wBAAwB,KAAK,SAAxC,GAAoD,CAApD,GAAwD;AAFhD,OA9BJ;AAkCf2D,MAAAA,uBAAuB,EAAE,EACvB,GAAGhF,UAAU,CAACiF,kBADS;AAEvBX,QAAAA,cAAc,EAAE,QAFO;AAGvBC,QAAAA,UAAU,EAAE;AAHW;AAlCV,KAAjB;AAAA,GADsB,EAyCtB,CAACzD,OAAD,EAAUK,SAAV,EAAqBF,OAArB,EAA8BG,OAA9B,EAAuCC,wBAAvC,EAAiE4B,CAAjE,EAAoEK,UAApE,EAAgFC,WAAhF,EAA6FP,YAA7F,CAzCsB,CAAxB;;AA4CA,QAAMkC,QAAQ,GAAG,MAAM;AACrB,YAAQ,OAAOvE,KAAf;AACE,WAAK,QAAL;AACE,4BACE,oBAAC,IAAD;AAAM,UAAA,OAAO,EAAC,QAAd;AAAuB,UAAA,UAAU,EAAE,KAAnC;AAA0C,UAAA,KAAK,EAAE,CAAC;AAAEI,YAAAA,KAAK,EAAEoC;AAAT,WAAD,EAA0BK,MAAM,CAAC9B,UAAjC,EAA6CA,UAA7C;AAAjD,WACGf,KADH,CADF;;AAKF,WAAK,UAAL;AACE,eAAOA,KAAK,CAAC;AAAEI,UAAAA,KAAK,EAAEoC;AAAT,SAAD,CAAZ;;AACF;AACE,eAAOxC,KAAP;AAVJ;AAYD,GAbD;;AAeA,QAAMwE,mBAAmB,GAAG,MAAM;AAChC,QAAI,CAAC7D,gBAAL,EAAuB,oBAAO,oBAAC,iBAAD;AAAmB,MAAA,KAAK,EAAE6B;AAA1B,MAAP;;AACvB,YAAQ,OAAO7B,gBAAf;AACE,WAAK,QAAL;AACE,4BACE,oBAAC,IAAD;AAAM,UAAA,OAAO,EAAC,QAAd;AAAuB,UAAA,KAAK,EAAE;AAAEP,YAAAA,KAAK,EAAEoC;AAAT;AAA9B,WACG7B,gBADH,CADF;;AAKF,WAAK,UAAL;AACE,eAAOA,gBAAgB,CAAC;AAAEP,UAAAA,KAAK,EAAEoC;AAAT,SAAD,CAAvB;;AACF;AACE,eAAO7B,gBAAP;AAVJ;AAYD,GAdD;;AAgBA,QAAM8D,UAAU,GAAG,MAAM;AACvB,QAAIhE,OAAO,IAAIC,wBAAwB,KAAK,SAA5C,EAAuD,OAAO8D,mBAAmB,EAA1B;AACvD,WAAO,OAAOvE,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAAC;AAAEG,MAAAA,KAAK,EAAEoC,YAAT;AAAuBkC,MAAAA,IAAI,EAAE;AAA7B,KAAD,CAAvC,GAA6EzE,OAApF;AACD,GAHD;;AAKA,QAAM0E,WAAW,GAAG,MAAM;AACxB,QAAIlE,OAAO,IAAIC,wBAAwB,KAAK,UAA5C,EAAwD,OAAO8D,mBAAmB,EAA1B;AACxD,WAAO,OAAOtE,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAAC;AAAEE,MAAAA,KAAK,EAAEoC,YAAT;AAAuBkC,MAAAA,IAAI,EAAE;AAA7B,KAAD,CAAzC,GAA+ExE,QAAtF;AACD,GAHD;;AAKA,QAAM,CAAC0E,OAAD,EAAUC,UAAV,IAAwBzF,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM0F,gBAAgB,GAAG5F,WAAW,CACjC6F,KAAD,IAAgD;AAC9CpD,IAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGoD,KAAH,CAAZ;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAJiC,EAKlC,CAAClD,YAAD,CALkC,CAApC;AAQA,QAAMqD,gBAAgB,GAAG9F,WAAW,CACjC6F,KAAD,IAAgD;AAC9CnD,IAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGmD,KAAH,CAAZ;AACAF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAJiC,EAKlC,CAACjD,YAAD,CALkC,CAApC;AAQA,QAAM,CAACqD,OAAD,EAAUC,UAAV,IAAwB9F,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM+F,aAAa,GAAGjG,WAAW,CAC9B6F,KAAD,IAAkC;AAChCzD,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAGyD,KAAH,CAAT;AACAG,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAJ8B,EAK/B,CAAC5D,SAAD,CAL+B,CAAjC;AAQA,QAAM8D,cAAc,GAAGlG,WAAW,CAC/B6F,KAAD,IAAkC;AAChCxD,IAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAGwD,KAAH,CAAV;AACAG,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAJ+B,EAKhC,CAAC3D,UAAD,CALgC,CAAlC;AAQA,QAAM8D,iBAAiB,GAAGvF,oBAAoB,CAC5CK,OAAO,KAAK,WAAZ,IAA2B,CAACI,gBAA5B,IAAgD,CAACuB,QAAjD,GAA6DmD,OAAO,GAAG,CAAH,GAAOL,OAAO,GAAG,CAAH,GAAO,CAAzF,GAA8F,CADlD,CAA9C;AAIA,sBACE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,OAAlB;AAA0B,IAAA,KAAK,EAAE,CAACS,iBAAD,EAAoBxC,MAAM,CAACE,SAA3B,EAAsCnC,KAAtC;AAAjC,KAAmFwB,IAAnF,gBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACS,MAAM,CAACQ,kBAAR,EAA4BxC,uBAA5B;AAAb,kBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE,CAACgC,MAAM,CAACU,SAAR,EAAmBzC,qBAAnB,CADT;AAEE,IAAA,WAAW,EAAEK,WAFf;AAGE,IAAA,gBAAgB,EAAEC,gBAAF,aAAEA,gBAAF,cAAEA,gBAAF,GAAsBoB,YAHxC;AAIE,IAAA,OAAO,EAAEnB,OAJX;AAKE,IAAA,SAAS,EAAE8D,aALb;AAME,IAAA,UAAU,EAAEC,cANd;AAOE,IAAA,WAAW,EAAE5D,WAPf;AAQE,IAAA,MAAM,EAAEC,MARV;AASE,IAAA,OAAO,EAAEC,OATX;AAUE,IAAA,YAAY,EAAEoD,gBAVhB;AAWE,IAAA,YAAY,EAAEE,gBAXhB;AAYE,IAAA,cAAc,EAAEnD,cAZlB;AAaE,IAAA,QAAQ,EAAEC,QAbZ;AAcE,IAAA,OAAO,EAAEC,OAdX;AAeE,IAAA,oBAAoB,EAAEC,oBAfxB;AAgBE,IAAA,oBAAoB,EAAEC,oBAhBxB;AAiBE,IAAA,cAAc,EAAEC,cAjBlB;AAkBE,IAAA,gBAAgB,EAAEC;AAlBpB,KAoBGQ,UAAU,iBAAI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACE,MAAM,CAACoB,gBAAR,EAA0BjD,qBAA1B;AAAb,KAAgEyD,UAAU,EAA1E,CApBjB,EAqBGF,QAAQ,EArBX,EAsBG3B,WAAW,iBAAI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACC,MAAM,CAACsB,iBAAR,EAA2BlD,sBAA3B;AAAb,KAAkE0D,WAAW,EAA7E,CAtBlB,EAwBGlE,OAAO,IAAIC,wBAAwB,KAAK,SAAxC,iBACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACmC,MAAM,CAACwB,uBAAR,EAAiCnD,4BAAjC;AAAb,KAA8EsD,mBAAmB,EAAjG,CAzBJ,CADF,CADF,EA+BGrE,OAAO,KAAK,UAAZ,iBAA0B,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACd,UAAU,CAACiG,YAAZ,EAA0BzC,MAAM,CAACI,OAAjC,CAAb;AAAwD,IAAA,aAAa,EAAC;AAAtE,IA/B7B,CADF;AAmCD,CAhOD;;AAkOA,eAAelD,MAAf","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TargetedEvent,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Surface, { SurfaceProps } from './Surface';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useSurfaceScale } from './hooks/use-surface-scale';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nexport interface ButtonProps extends Omit<SurfaceProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The text content of the button.\n   */\n  title: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed before the `title`.\n   */\n  leading?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed after the `title`.\n   */\n  trailing?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The style of the button.\n   * - `text`: Text buttons are typically used for less important actions (low emphasis).\n   * - `outlined`: Outlined buttons are used for more emphasis than text buttons due to the stroke (medium emphasis).\n   * - `contained`: Contained buttons have more emphasis, as they use a color fill and shadow (high emphasis).\n   *\n   * @default \"contained\"\n   */\n  variant?: 'text' | 'outlined' | 'contained';\n\n  /**\n   * The main color of the button.\n   * for `contained` buttons, this is the background color.\n   * for `outlined` and `text` buttons, this is the color of the content (text, icons, etc.).\n   *\n   * @default \"primary\"\n   */\n  color?: Color;\n\n  /**\n   * The color of the `contained` buttons content (text, icons, etc.). No effect on `outlined` and `text` buttons.\n   */\n  tintColor?: Color;\n\n  /**\n   * Smaller horizontal padding, useful for `text` buttons in a row.\n   *\n   * @default false\n   */\n  compact?: boolean;\n\n  /**\n   * If `true`, no shadow is used. No effect on `outlined` and `text` buttons.\n   *\n   * @default false\n   */\n  disableElevation?: boolean;\n\n  /**\n   * If `false`, the button title is not rendered in upper case. No effect if you pass a React.Node as the `title` prop.\n   *\n   * @default true\n   */\n  uppercase?: boolean;\n\n  /**\n   * Whether to show a loading indicator.\n   *\n   * @default false\n   */\n  loading?: boolean;\n\n  /**\n   * The place where the loading indicator should appear.\n   * - `leading`: The indicator will replace the `leading` element.\n   * - `trailing`: The indicator will replace the `trailing` element.\n   * - `overlay`: The indicator will be added as an overlay over the button.\n   *\n   * @default \"leading\"\n   */\n  loadingIndicatorPosition?: 'leading' | 'trailing' | 'overlay';\n\n  /**\n   * A React.Node to replace the default loading indicator. Also, you can pass a string to show a text (e.g. \"Loading...\").\n   */\n  loadingIndicator?: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The style of the button's pressable component container.\n   */\n  pressableContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's container.\n   */\n  contentContainerStyle?: PressableProps['style'];\n\n  /**\n   * The style of the button's text. No effect if you pass a React.Node as the `title` prop.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n\n  /**\n   * The style of the button's leading element container.\n   */\n  leadingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's trailing element container.\n   */\n  trailingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's loading indicator overlay view. No effect if `loadingIndicatorPosition` is not `overlay`.\n   */\n  loadingOverlayContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  title,\n  leading,\n  trailing,\n  variant = 'contained',\n  color = 'primary',\n  tintColor,\n  compact = false,\n  disableElevation = false,\n  uppercase = true,\n  loading = false,\n  loadingIndicatorPosition = 'leading',\n  loadingIndicator,\n\n  style,\n  pressableContainerStyle,\n  contentContainerStyle,\n  titleStyle,\n  leadingContainerStyle,\n  trailingContainerStyle,\n  loadingOverlayContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n\n  ...rest\n}) => {\n  const surfaceScale = useSurfaceScale();\n\n  const p = usePaletteColor(\n    disabled ? surfaceScale(0.12).hex() : color,\n    disabled ? surfaceScale(0.35).hex() : tintColor\n  );\n\n  const contentColor = useMemo(\n    () => (variant === 'contained' ? p.on : disabled ? p.on : p.main),\n    [variant, p, disabled]\n  );\n\n  const hasLeading = useMemo(\n    () => !!leading || (loading && loadingIndicatorPosition === 'leading'),\n    [leading, loading, loadingIndicatorPosition]\n  );\n\n  const hasTrailing = useMemo(\n    () => !!trailing || (loading && loadingIndicatorPosition === 'trailing'),\n    [trailing, loading, loadingIndicatorPosition]\n  );\n\n  const styles = useStyles(\n    ({ shapes }) => ({\n      container: {\n        backgroundColor: variant === 'contained' ? p.main : 'transparent',\n      },\n      outline: {\n        ...shapes.small,\n        borderWidth: 1,\n        borderColor: surfaceScale(0.12).hex(),\n      },\n      pressableContainer: {\n        ...shapes.small,\n        overflow: 'hidden',\n      },\n      pressable: {\n        minWidth: 64,\n        height: 36,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingStart: hasLeading ? (compact ? 6 : 12) : compact ? 8 : 16,\n        paddingEnd: hasTrailing ? (compact ? 6 : 12) : compact ? 8 : 16,\n      },\n      titleStyle: {\n        textTransform: uppercase ? 'uppercase' : 'none',\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      leadingContainer: {\n        marginEnd: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      trailingContainer: {\n        marginStart: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      loadingOverlayContainer: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }),\n    [variant, uppercase, compact, loading, loadingIndicatorPosition, p, hasLeading, hasTrailing, surfaceScale]\n  );\n\n  const getTitle = () => {\n    switch (typeof title) {\n      case 'string':\n        return (\n          <Text variant=\"button\" selectable={false} style={[{ color: contentColor }, styles.titleStyle, titleStyle]}>\n            {title}\n          </Text>\n        );\n      case 'function':\n        return title({ color: contentColor });\n      default:\n        return title;\n    }\n  };\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return <ActivityIndicator color={contentColor} />;\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return (\n          <Text variant=\"button\" style={{ color: contentColor }}>\n            {loadingIndicator}\n          </Text>\n        );\n      case 'function':\n        return loadingIndicator({ color: contentColor });\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getLeading = () => {\n    if (loading && loadingIndicatorPosition === 'leading') return getLoadingIndicator();\n    return typeof leading === 'function' ? leading({ color: contentColor, size: 18 }) : leading;\n  };\n\n  const getTrailing = () => {\n    if (loading && loadingIndicatorPosition === 'trailing') return getLoadingIndicator();\n    return typeof trailing === 'function' ? trailing({ color: contentColor, size: 18 }) : trailing;\n  };\n\n  const [hovered, setHovered] = useState(false);\n\n  const handleMouseEnter = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      onMouseEnter?.(event);\n      setHovered(true);\n    },\n    [onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      onMouseLeave?.(event);\n      setHovered(false);\n    },\n    [onMouseLeave]\n  );\n\n  const [pressed, setPressed] = useState(false);\n\n  const handlePressIn = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressIn?.(event);\n      setPressed(true);\n    },\n    [onPressIn]\n  );\n\n  const handlePressOut = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressOut?.(event);\n      setPressed(false);\n    },\n    [onPressOut]\n  );\n\n  const animatedElevation = useAnimatedElevation(\n    variant === 'contained' && !disableElevation && !disabled ? (pressed ? 8 : hovered ? 4 : 2) : 0\n  );\n\n  return (\n    <Surface category=\"small\" style={[animatedElevation, styles.container, style]} {...rest}>\n      <View style={[styles.pressableContainer, pressableContainerStyle]}>\n        <Pressable\n          style={[styles.pressable, contentContainerStyle]}\n          pressEffect={pressEffect}\n          pressEffectColor={pressEffectColor ?? contentColor}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onLongPress={onLongPress}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          delayLongPress={delayLongPress}\n          disabled={disabled}\n          hitSlop={hitSlop}\n          pressRetentionOffset={pressRetentionOffset}\n          android_disableSound={android_disableSound}\n          android_ripple={android_ripple}\n          testOnly_pressed={testOnly_pressed}\n        >\n          {hasLeading && <View style={[styles.leadingContainer, leadingContainerStyle]}>{getLeading()}</View>}\n          {getTitle()}\n          {hasTrailing && <View style={[styles.trailingContainer, trailingContainerStyle]}>{getTrailing()}</View>}\n\n          {loading && loadingIndicatorPosition === 'overlay' && (\n            <View style={[styles.loadingOverlayContainer, loadingOverlayContainerStyle]}>{getLoadingIndicator()}</View>\n          )}\n        </Pressable>\n      </View>\n      {variant === 'outlined' && <View style={[StyleSheet.absoluteFill, styles.outline]} pointerEvents=\"none\" />}\n    </Surface>\n  );\n};\n\nexport default Button;\n"]}