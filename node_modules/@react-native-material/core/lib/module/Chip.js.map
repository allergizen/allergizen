{"version":3,"sources":["Chip.tsx"],"names":["React","useMemo","StyleSheet","View","chroma","Pressable","Text","usePaletteColor","useTheme","Chip","label","leading","trailing","variant","color","style","contentContainerStyle","labelStyle","leadingContainerStyle","trailingContainerStyle","children","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","theme","palette","surface","main","scale","on","labelElement","hex","leadingElement","size","trailingElement","styles","container","backgroundColor","contentContainer","leadingContainer","trailingContainer","absoluteFill","outline","borderColor","create","borderRadius","overflow","flexDirection","alignItems","paddingHorizontal","height","marginStart","marginEnd","borderWidth"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleProp, StyleSheet, TextStyle, View, ViewProps, ViewStyle } from 'react-native';\nimport chroma from 'chroma-js';\nimport Pressable, { PressableProps } from './Pressable';\nimport Text from './Text';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useTheme } from './base/ThemeContext';\n\nexport interface ChipProps extends Omit<ViewProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The text to display in the chip.\n   */\n  label: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed before the `label`.\n   */\n  leading?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed after the `label`.\n   */\n  trailing?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The variant of the chip.\n   * - `filled`: A filled chip.\n   * - `outlined`: A solid background with a border.\n   *\n   * @default \"filled\"\n   */\n  variant?: 'filled' | 'outlined';\n\n  /**\n   * The color of the chip.\n   */\n  color?: Color;\n\n  /**\n   * The style of the chip's container.\n   */\n  contentContainerStyle?: PressableProps['style'];\n\n  /**\n   * The style of the chip's label.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n\n  /**\n   * The style of the chip's leading element.\n   */\n  leadingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the chip's trailing element.\n   */\n  trailingContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Chip: React.FC<ChipProps> = ({\n  label,\n  leading,\n  trailing,\n  variant = 'filled',\n  color = 'on-surface',\n  style,\n  contentContainerStyle,\n  labelStyle,\n  leadingContainerStyle,\n  trailingContainerStyle,\n  children,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const theme = useTheme();\n\n  const palette = usePaletteColor(color, theme.palette.surface.main);\n\n  const scale = useMemo(() => chroma.scale([palette.on, palette.main]), [palette]);\n\n  const labelElement =\n    typeof label === 'string' ? (\n      <Text variant=\"body2\" style={[{ color: scale(0.87).hex() }, labelStyle]}>\n        {label}\n      </Text>\n    ) : typeof label === 'function' ? (\n      label({ color: scale(0.87).hex() })\n    ) : (\n      label\n    );\n\n  const leadingElement = typeof leading === 'function' ? leading({ color: scale(0.66).hex(), size: 24 }) : leading;\n\n  const trailingElement = typeof trailing === 'function' ? trailing({ color: scale(0.66).hex(), size: 18 }) : trailing;\n\n  return (\n    <View style={[styles.container, variant === 'filled' && { backgroundColor: scale(0.08).hex() }, style]} {...rest}>\n      <Pressable\n        pressEffect={pressEffect}\n        pressEffectColor={pressEffectColor ?? scale(0.87).hex()}\n        onPress={onPress}\n        onPressIn={onPressIn}\n        onPressOut={onPressOut}\n        onLongPress={onLongPress}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        delayLongPress={delayLongPress}\n        disabled={disabled}\n        hitSlop={hitSlop}\n        pressRetentionOffset={pressRetentionOffset}\n        android_disableSound={android_disableSound}\n        android_ripple={android_ripple}\n        testOnly_pressed={testOnly_pressed}\n        style={[styles.contentContainer, contentContainerStyle]}\n      >\n        {leadingElement && <View style={[styles.leadingContainer, leadingContainerStyle]}>{leadingElement}</View>}\n        {labelElement}\n        {children}\n        {trailingElement && <View style={[styles.trailingContainer, trailingContainerStyle]}>{trailingElement}</View>}\n\n        {variant === 'outlined' && (\n          <View style={[StyleSheet.absoluteFill, styles.outline, { borderColor: scale(0.26).hex() }]} />\n        )}\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 16,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    height: 32,\n  },\n  leadingContainer: {\n    marginStart: -8,\n    marginEnd: 8,\n  },\n  trailingContainer: {\n    marginStart: 8,\n    marginEnd: -4,\n  },\n  outline: {\n    borderWidth: 1,\n    borderRadius: 16,\n  },\n});\n\nexport default Chip;\n"]}