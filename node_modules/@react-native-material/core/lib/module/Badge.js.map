{"version":3,"sources":["Badge.tsx"],"names":["React","useEffect","useMemo","useRef","Animated","Text","usePaletteColor","useStyles","Badge","label","showZero","max","visible","color","tintColor","style","labelStyle","children","palette","styles","container","minWidth","height","justifyContent","alignItems","paddingHorizontal","backgroundColor","main","borderRadius","isVisible","animated","Value","current","timing","toValue","duration","useNativeDriver","start","getLabel","on","transform","scale"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAASC,QAAT,QAA0D,cAA1D;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAgBC,eAAhB,QAAuC,2BAAvC;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAoBA,MAAMC,KAA2B,GAAG,QAU9B;AAAA,MAV+B;AACnCC,IAAAA,KADmC;AAEnCC,IAAAA,QAAQ,GAAG,KAFwB;AAGnCC,IAAAA,GAAG,GAAG,EAH6B;AAInCC,IAAAA,OAAO,GAAG,IAJyB;AAKnCC,IAAAA,KAAK,GAAG,WAL2B;AAMnCC,IAAAA,SANmC;AAOnCC,IAAAA,KAPmC;AAQnCC,IAAAA,UARmC;AASnCC,IAAAA;AATmC,GAU/B;AACJ,QAAMC,OAAO,GAAGZ,eAAe,CAACO,KAAD,EAAQC,SAAR,CAA/B;AAEA,QAAMK,MAAM,GAAGZ,SAAS,CACtB,OAAO;AACLa,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,MAAM,EAAE,EAFC;AAGTC,MAAAA,cAAc,EAAE,QAHP;AAITC,MAAAA,UAAU,EAAE,QAJH;AAKTC,MAAAA,iBAAiB,EAAE,CALV;AAMTC,MAAAA,eAAe,EAAER,OAAO,CAACS,IANhB;AAOTC,MAAAA,YAAY,EAAE;AAPL;AADN,GAAP,CADsB,EAYtB,CAACV,OAAD,CAZsB,CAAxB;AAeA,QAAMW,SAAS,GAAG3B,OAAO,CAAC,MAAOO,KAAK,KAAK,CAAV,GAAcG,OAAO,IAAIF,QAAzB,GAAoCE,OAA5C,EAAsD,CAACH,KAAD,EAAQC,QAAR,EAAkBE,OAAlB,CAAtD,CAAzB;AAEA,QAAMkB,QAAQ,GAAG3B,MAAM,CAAC,IAAIC,QAAQ,CAAC2B,KAAb,CAAmBF,SAAS,GAAG,CAAH,GAAO,CAAnC,CAAD,CAAN,CAA8CG,OAA/D;AAEA/B,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ,CAAC6B,MAAT,CAAgBH,QAAhB,EAA0B;AACxBI,MAAAA,OAAO,EAAEL,SAAS,GAAG,CAAH,GAAO,CADD;AAExBM,MAAAA,QAAQ,EAAE,GAFc;AAGxBC,MAAAA,eAAe,EAAE;AAHO,KAA1B,EAIGC,KAJH;AAKD,GANQ,EAMN,CAACR,SAAD,CANM,CAAT;;AAQA,QAAMS,QAAQ,GAAG,MAAM;AACrB,YAAQ,OAAO7B,KAAf;AACE,WAAK,QAAL;AACA,WAAK,QAAL;AACE,4BACE,oBAAC,IAAD;AAAM,UAAA,OAAO,EAAC,OAAd;AAAsB,UAAA,KAAK,EAAE,CAAC;AAAEI,YAAAA,KAAK,EAAEK,OAAO,CAACqB;AAAjB,WAAD,EAAwBvB,UAAxB;AAA7B,WACG,OAAOP,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAGE,GAArC,GAA4C,GAAEA,GAAI,GAAlD,GAAuDF,KAD1D,CADF;;AAKF,WAAK,UAAL;AACE,eAAOA,KAAK,CAAC;AAAEI,UAAAA,KAAK,EAAEK,OAAO,CAACqB;AAAjB,SAAD,CAAZ;;AACF;AACE,eAAO9B,KAAP;AAXJ;AAaD,GAdD;;AAgBA,sBACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE,CAACU,MAAM,CAACC,SAAR,EAAmB;AAAEoB,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAD;AAAb,KAAnB,EAAyDf,KAAzD;AAAtB,KACGuB,QAAQ,EADX,EAEGrB,QAFH,CADF;AAMD,CA9DD;;AAgEA,eAAeT,KAAf","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport { Animated, StyleProp, TextStyle, ViewProps } from 'react-native';\nimport Text from './Text';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\n\nexport interface BadgeProps {\n  label?: number | string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  showZero?: boolean;\n\n  max?: number;\n\n  visible?: boolean;\n\n  color?: Color;\n\n  tintColor?: Color;\n\n  style?: Animated.AnimatedProps<ViewProps>['style'];\n\n  labelStyle?: StyleProp<TextStyle>;\n}\n\nconst Badge: React.FC<BadgeProps> = ({\n  label,\n  showZero = false,\n  max = 99,\n  visible = true,\n  color = 'secondary',\n  tintColor,\n  style,\n  labelStyle,\n  children,\n}) => {\n  const palette = usePaletteColor(color, tintColor);\n\n  const styles = useStyles(\n    () => ({\n      container: {\n        minWidth: 20,\n        height: 20,\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingHorizontal: 6,\n        backgroundColor: palette.main,\n        borderRadius: 10,\n      },\n    }),\n    [palette]\n  );\n\n  const isVisible = useMemo(() => (label === 0 ? visible && showZero : visible), [label, showZero, visible]);\n\n  const animated = useRef(new Animated.Value(isVisible ? 1 : 0)).current;\n\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: isVisible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [isVisible]);\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'number':\n      case 'string':\n        return (\n          <Text variant=\"body2\" style={[{ color: palette.on }, labelStyle]}>\n            {typeof label === 'number' && label > max ? `${max}+` : label}\n          </Text>\n        );\n      case 'function':\n        return label({ color: palette.on });\n      default:\n        return label;\n    }\n  };\n\n  return (\n    <Animated.View style={[styles.container, { transform: [{ scale: animated }] }, style]}>\n      {getLabel()}\n      {children}\n    </Animated.View>\n  );\n};\n\nexport default Badge;\n"]}