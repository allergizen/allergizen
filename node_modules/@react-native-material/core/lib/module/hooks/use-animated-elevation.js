import { useEffect, useMemo } from 'react';
import { Animated, Platform } from 'react-native';
import { useTheme } from '../base/ThemeContext';
const inputRange = Array.from(Array(25).keys());
export const useAnimatedElevation = elevation => {
  const animated = useMemo(() => new Animated.Value(elevation), []);
  useEffect(() => {
    if (Platform.OS === 'web') return;
    Animated.timing(animated, {
      toValue: elevation,
      duration: 200,
      useNativeDriver: true
    }).start();
  }, [elevation]);
  const {
    elevations
  } = useTheme();
  return useMemo(() => [Platform.select({
    android: {
      elevation: animated
    },
    default: {
      shadowColor: elevations[elevation].shadowColor,
      shadowOffset: {
        width: animated.interpolate({
          inputRange,
          outputRange: Object.values(elevations).map(e => {
            var _e$shadowOffset$width, _e$shadowOffset;

            return (_e$shadowOffset$width = (_e$shadowOffset = e.shadowOffset) === null || _e$shadowOffset === void 0 ? void 0 : _e$shadowOffset.width) !== null && _e$shadowOffset$width !== void 0 ? _e$shadowOffset$width : 0;
          })
        }),
        height: animated.interpolate({
          inputRange,
          outputRange: Object.values(elevations).map(e => {
            var _e$shadowOffset$heigh, _e$shadowOffset2;

            return (_e$shadowOffset$heigh = (_e$shadowOffset2 = e.shadowOffset) === null || _e$shadowOffset2 === void 0 ? void 0 : _e$shadowOffset2.height) !== null && _e$shadowOffset$heigh !== void 0 ? _e$shadowOffset$heigh : 0;
          })
        })
      },
      shadowOpacity: animated.interpolate({
        inputRange,
        outputRange: Object.values(elevations).map(e => {
          var _e$shadowOpacity;

          return (_e$shadowOpacity = e.shadowOpacity) !== null && _e$shadowOpacity !== void 0 ? _e$shadowOpacity : 0;
        })
      }),
      shadowRadius: animated.interpolate({
        inputRange,
        outputRange: Object.values(elevations).map(e => {
          var _e$shadowRadius;

          return (_e$shadowRadius = e.shadowRadius) !== null && _e$shadowRadius !== void 0 ? _e$shadowRadius : 0;
        })
      })
    },
    web: {
      boxShadow: elevations[elevation].boxShadow,
      transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
    }
  }), Platform.select({
    default: {},
    web: {}
  })], [elevation, elevations]);
};
//# sourceMappingURL=use-animated-elevation.js.map