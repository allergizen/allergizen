{"version":3,"sources":["use-styles.ts"],"names":["useMemo","useSpacingFunc","useTheme","useWindowSizeClass","useWindowSize","useSurfaceScale","useSurfaceColor","useStyles","factory","deps","theme","surfaceScale","surfaceColor","windowSizeClass","windowSize","spacing"],"mappings":"AAAA,SAAyBA,OAAzB,QAAwC,OAAxC;AAGA,SAAsBC,cAAtB,QAA4C,0BAA5C;AACA,SAAgBC,QAAhB,QAAgC,sBAAhC;AACA,SAASC,kBAAT,QAAoD,gCAApD;AACA,SAASC,aAAT,QAA0C,mBAA1C;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAIA,OAAO,MAAMC,SAAS,GAAG,CACvBC,OADuB,EAUvBC,IAVuB,KAWjB;AACN,QAAMC,KAAK,GAAGR,QAAQ,EAAtB;AACA,QAAMS,YAAY,GAAGN,eAAe,EAApC;AACA,QAAMO,YAAY,GAAGN,eAAe,EAApC;AACA,QAAMO,eAAe,GAAGV,kBAAkB,EAA1C;AACA,QAAMW,UAAU,GAAGV,aAAa,EAAhC;AACA,QAAMW,OAAO,GAAGd,cAAc,EAA9B;AAEA,SAAOD,OAAO,CACZ,MAAMQ,OAAO,CAAC,EAAE,GAAGE,KAAL;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,YAA1B;AAAwCC,IAAAA,eAAxC;AAAyDC,IAAAA,UAAzD;AAAqEC,IAAAA;AAArE,GAAD,CADD,EAEZ,CAACP,OAAD,EAAUE,KAAV,EAAiBC,YAAjB,EAA+BC,YAA/B,EAA6CC,eAA7C,EAA8DC,UAA9D,EAA0EC,OAA1E,EAAmFN,IAAnF,CAFY,CAAd;AAID,CAvBM","sourcesContent":["import { DependencyList, useMemo } from 'react';\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native';\nimport type chroma from 'chroma-js';\nimport { SpacingFunc, useSpacingFunc } from 'react-native-flex-layout';\nimport { Theme, useTheme } from '../base/ThemeContext';\nimport { useWindowSizeClass, WindowSizeClass } from '../base/WindowSizeClassContext';\nimport { useWindowSize, WindowSize } from './use-window-size';\nimport { useSurfaceScale } from './use-surface-scale';\nimport { useSurfaceColor } from './use-surface-color';\n\ntype NamedStyles<T> = { [P in keyof T]: ViewStyle | TextStyle | ImageStyle };\n\nexport const useStyles = <T extends NamedStyles<T>>(\n  factory: (\n    utils: Theme & {\n      surfaceScale: chroma.Scale<chroma.Color>;\n      surfaceColor: chroma.Scale<chroma.Color>;\n      windowSizeClass: WindowSizeClass;\n      windowSize: WindowSize;\n      spacing: SpacingFunc;\n    }\n  ) => T,\n  deps?: DependencyList | undefined\n): T => {\n  const theme = useTheme();\n  const surfaceScale = useSurfaceScale();\n  const surfaceColor = useSurfaceColor();\n  const windowSizeClass = useWindowSizeClass();\n  const windowSize = useWindowSize();\n  const spacing = useSpacingFunc();\n\n  return useMemo(\n    () => factory({ ...theme, surfaceScale, surfaceColor, windowSizeClass, windowSize, spacing }),\n    [factory, theme, surfaceScale, surfaceColor, windowSizeClass, windowSize, spacing, deps]\n  );\n};\n"]}