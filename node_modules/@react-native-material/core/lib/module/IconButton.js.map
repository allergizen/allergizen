{"version":3,"sources":["IconButton.tsx"],"names":["React","StyleSheet","View","Pressable","usePaletteColor","styles","create","container","width","height","borderRadius","overflow","contentContainer","justifyContent","alignItems","IconButton","icon","color","style","contentContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","palette","absoluteFill","main","size"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAA4C,cAA5C;AACA,OAAOC,SAAP,MAA0C,aAA1C;AACA,SAAgBC,eAAhB,QAAuC,2BAAvC;AAqBA,MAAMC,MAAM,GAAGJ,UAAU,CAACK,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,EADE;AAETC,IAAAA,MAAM,EAAE,EAFC;AAGTC,IAAAA,YAAY,EAAE,KAAK,CAHV;AAITC,IAAAA,QAAQ,EAAE;AAJD,GADoB;AAO/BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,cAAc,EAAE,QADA;AAEhBC,IAAAA,UAAU,EAAE;AAFI;AAPa,CAAlB,CAAf;;AAaA,MAAMC,UAAqC,GAAG,QAwBxC;AAAA,MAxByC;AAC7CC,IAAAA,IAD6C;AAE7CC,IAAAA,KAAK,GAAG,eAFqC;AAG7CC,IAAAA,KAH6C;AAI7CC,IAAAA,qBAJ6C;AAM7CC,IAAAA,WAN6C;AAO7CC,IAAAA,gBAP6C;AAQ7CC,IAAAA,OAR6C;AAS7CC,IAAAA,SAT6C;AAU7CC,IAAAA,UAV6C;AAW7CC,IAAAA,WAX6C;AAY7CC,IAAAA,MAZ6C;AAa7CC,IAAAA,OAb6C;AAc7CC,IAAAA,YAd6C;AAe7CC,IAAAA,YAf6C;AAgB7CC,IAAAA,cAhB6C;AAiB7CC,IAAAA,QAjB6C;AAkB7CC,IAAAA,OAlB6C;AAmB7CC,IAAAA,oBAnB6C;AAoB7CC,IAAAA,oBApB6C;AAqB7CC,IAAAA,cArB6C;AAsB7CC,IAAAA,gBAtB6C;AAuB7C,OAAGC;AAvB0C,GAwBzC;AACJ,QAAMC,OAAO,GAAGlC,eAAe,CAACa,KAAD,CAA/B;AACA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACZ,MAAM,CAACE,SAAR,EAAmBW,KAAnB;AAAb,KAA4CmB,IAA5C,gBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE,CAACpC,UAAU,CAACsC,YAAZ,EAA0BlC,MAAM,CAACO,gBAAjC,EAAmDO,qBAAnD,CADT;AAEE,IAAA,WAAW,EAAEC,WAFf;AAGE,IAAA,gBAAgB,EAAEC,gBAAF,aAAEA,gBAAF,cAAEA,gBAAF,GAAsBiB,OAAO,CAACE,IAHhD;AAIE,IAAA,OAAO,EAAElB,OAJX;AAKE,IAAA,SAAS,EAAEC,SALb;AAME,IAAA,UAAU,EAAEC,UANd;AAOE,IAAA,WAAW,EAAEC,WAPf;AAQE,IAAA,MAAM,EAAEC,MARV;AASE,IAAA,OAAO,EAAEC,OATX;AAUE,IAAA,YAAY,EAAEC,YAVhB;AAWE,IAAA,YAAY,EAAEC,YAXhB;AAYE,IAAA,cAAc,EAAEC,cAZlB;AAaE,IAAA,QAAQ,EAAEC,QAbZ;AAcE,IAAA,OAAO,EAAEC,OAdX;AAeE,IAAA,oBAAoB,EAAEC,oBAfxB;AAgBE,IAAA,oBAAoB,EAAEC,oBAhBxB;AAiBE,IAAA,cAAc,EAAEC,cAjBlB;AAkBE,IAAA,gBAAgB,EAAEC;AAlBpB,KAoBGpB,IAAI,GAAI,OAAOA,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,CAAC;AAAEC,IAAAA,KAAK,EAAEqB,OAAO,CAACE,IAAjB;AAAuBC,IAAAA,IAAI,EAAE;AAA7B,GAAD,CAAjC,GAAuEzB,IAA3E,GAAmF,IApB1F,CADF,CADF;AA0BD,CApDD;;AAsDA,eAAeD,UAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\n\nexport interface IconButtonProps extends Omit<ViewProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The element to render as the icon.\n   */\n  icon?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The color of the icon and the press effect.\n   *\n   * @default \"on-background\"\n   */\n  color?: Color;\n\n  /**\n   * The style of the icon's container view.\n   */\n  contentContainerStyle?: PressableProps['style'];\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    borderRadius: 48 / 2,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nconst IconButton: React.FC<IconButtonProps> = ({\n  icon,\n  color = 'on-background',\n  style,\n  contentContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const palette = usePaletteColor(color);\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      <Pressable\n        style={[StyleSheet.absoluteFill, styles.contentContainer, contentContainerStyle]}\n        pressEffect={pressEffect}\n        pressEffectColor={pressEffectColor ?? palette.main}\n        onPress={onPress}\n        onPressIn={onPressIn}\n        onPressOut={onPressOut}\n        onLongPress={onLongPress}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        delayLongPress={delayLongPress}\n        disabled={disabled}\n        hitSlop={hitSlop}\n        pressRetentionOffset={pressRetentionOffset}\n        android_disableSound={android_disableSound}\n        android_ripple={android_ripple}\n        testOnly_pressed={testOnly_pressed}\n      >\n        {icon ? (typeof icon === 'function' ? icon({ color: palette.main, size: 24 }) : icon) : null}\n      </Pressable>\n    </View>\n  );\n};\n\nexport default IconButton;\n"]}