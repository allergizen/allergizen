{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","title","secondaryText","overline","meta","leadingMode","leading","trailing","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","scale","backgroundColor","hex","flexDirection","alignItems","marginVertical","width","height","justifyContent","marginStart","flex","marginHorizontal","marginBottom","color","marginTop","marginEnd","size"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport Divider from './Divider';\nimport Text from './Text';\nimport type { SurfaceProps } from './Surface';\nimport Pressable, { PressableProps } from './Pressable';\nimport { useSurfaceScale } from './hooks/use-surface-scale';\n\nexport interface ListItemProps extends Omit<SurfaceProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  title?: string;\n\n  secondaryText?: string;\n\n  overline?: string;\n\n  meta?: string;\n\n  leadingMode?: 'icon' | 'avatar' | 'image';\n\n  leading?: React.ReactElement;\n\n  trailing?: React.ReactElement | ((props: { color: string; size: number }) => React.ReactElement | null) | null;\n}\n\nconst ListItem: React.FC<ListItemProps> = ({\n  title,\n  secondaryText,\n  overline,\n  meta,\n  leadingMode = 'icon',\n  leading,\n  trailing,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n}) => {\n  const scale = useSurfaceScale();\n\n  return (\n    <Pressable\n      style={{ backgroundColor: scale(0).hex() }}\n      pressEffect={pressEffect}\n      pressEffectColor={pressEffectColor}\n      onPress={onPress}\n      onPressIn={onPressIn}\n      onPressOut={onPressOut}\n      onLongPress={onLongPress}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n      delayLongPress={delayLongPress}\n      disabled={disabled}\n      hitSlop={hitSlop}\n      pressRetentionOffset={pressRetentionOffset}\n      android_disableSound={android_disableSound}\n      android_ripple={android_ripple}\n      testOnly_pressed={testOnly_pressed}\n    >\n      <View style={{ flexDirection: 'row', alignItems: 'center', marginVertical: 12 }}>\n        {leading && (\n          <View\n            style={{\n              width: leadingMode === 'icon' ? 24 : leadingMode === 'avatar' ? 56 : 100,\n              height: leadingMode === 'icon' ? 24 : leadingMode === 'avatar' ? 56 : 56,\n              justifyContent: 'center',\n              alignItems: 'center',\n              marginStart: leadingMode === 'image' ? 0 : 16,\n            }}\n          >\n            {leading}\n          </View>\n        )}\n        <View style={{ flex: 1, marginHorizontal: 16 }}>\n          {overline && (\n            <Text selectable={false} variant=\"overline\" style={{ marginBottom: 2, color: scale(0.6).hex() }}>\n              {overline}\n            </Text>\n          )}\n          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n            {title && (\n              <Text selectable={false} variant=\"subtitle1\" style={{ color: scale(0.87).hex() }}>\n                {title}\n              </Text>\n            )}\n            {meta && (\n              <Text selectable={false} variant=\"caption\" style={{ color: scale(0.87).hex() }}>\n                {meta}\n              </Text>\n            )}\n          </View>\n          {secondaryText && (\n            <Text selectable={false} variant=\"body2\" style={{ marginTop: 4, color: scale(0.6).hex() }}>\n              {secondaryText}\n            </Text>\n          )}\n        </View>\n        {trailing && (\n          <View\n            style={{\n              width: 24,\n              height: 24,\n              marginEnd: 16,\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            {typeof trailing === 'function' ? trailing({ color: scale(0.87).hex(), size: 24 }) : trailing}\n          </View>\n        )}\n      </View>\n      <Divider leadingInset={leading ? (leadingMode === 'icon' ? 56 : leadingMode === 'avatar' ? 88 : 116) : 16} />\n    </Pressable>\n  );\n};\n\nexport default ListItem;\n"]}