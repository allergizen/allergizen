{"version":3,"sources":["PortalContext.tsx"],"names":["PortalContext","usePortalContext","portal","Error","PortalProvider","children","portals","setPortals","Outlet","map","key","StyleSheet","absoluteFill","Portal","_key","Date","now","Math","random","filter","p"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEO,MAAMA,aAAa,gBAAG,0BAGnB,IAHmB,CAAtB;;;AAKA,MAAMC,gBAAgB,GAAG,MAAM;AACpC,QAAMC,MAAM,GAAG,uBAAWF,aAAX,CAAf;;AACA,MAAI,CAACE,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,SAAOD,MAAP;AACD,CANM;;;;AAQA,MAAME,cAAwB,GAAG,QAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACxD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB,qBAAwB,EAAxB,CAA9B;AAEA,sBAAO,6BAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAED,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AAA/B,KAAyDF,QAAzD,CAAP;AACD,CAJM;;;;AAMA,MAAMG,MAAgB,GAAG,MAAM;AACpC,QAAM;AAAEF,IAAAA;AAAF,MAAcL,gBAAgB,EAApC;AAEA,sBACE,6BAAC,cAAD,CAAO,QAAP,QACGK,OAAO,CAACG,GAAR,CAAY;AAAA,QAAC;AAAEC,MAAAA,GAAF;AAAOL,MAAAA;AAAP,KAAD;AAAA,wBACX,6BAAC,iBAAD;AAAM,MAAA,GAAG,EAAEK,GAAX;AAAgB,MAAA,aAAa,EAAC,UAA9B;AAAyC,MAAA,KAAK,EAAEC,wBAAWC;AAA3D,OACGP,QADH,CADW;AAAA,GAAZ,CADH,CADF;AASD,CAZM;;;;AAoBA,MAAMQ,MAA6B,GAAG,SAAuB;AAAA,MAAtB;AAAEH,IAAAA,GAAF;AAAOL,IAAAA;AAAP,GAAsB;AAClE,QAAM;AAAEE,IAAAA;AAAF,MAAiBN,gBAAgB,EAAvC;;AAEA,QAAMa,IAAI,GAAG,oBAAQ,MAAMJ,GAAN,aAAMA,GAAN,cAAMA,GAAN,GAAc,GAAEK,IAAI,CAACC,GAAL,KAAaC,IAAI,CAACC,MAAL,EAAc,EAAnD,EAAsD,CAACR,GAAD,CAAtD,CAAb;;AAEA,wBAAU,MAAM;AACdH,IAAAA,UAAU,CAAED,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAa;AAAEI,MAAAA,GAAG,EAAEI,IAAP;AAAaT,MAAAA;AAAb,KAAb,CAAd,CAAV;AAEA,WAAO,MAAM;AACXE,MAAAA,UAAU,CAAED,OAAD,IAAaA,OAAO,CAACa,MAAR,CAAgBC,CAAD,IAAOA,CAAC,CAACV,GAAF,KAAUI,IAAhC,CAAd,CAAV;AACD,KAFD;AAGD,GAND,EAMG,CAACA,IAAD,EAAOP,UAAP,EAAmBF,QAAnB,CANH;AAQA,SAAO,IAAP;AACD,CAdM","sourcesContent":["import React, { createContext, Dispatch, SetStateAction, useContext, useEffect, useMemo, useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nexport const PortalContext = createContext<{\n  portals: PortalProps[];\n  setPortals: Dispatch<SetStateAction<PortalProps[]>>;\n} | null>(null);\n\nexport const usePortalContext = () => {\n  const portal = useContext(PortalContext);\n  if (!portal) {\n    throw new Error('usePortalContext must be used within a PortalContext');\n  }\n  return portal;\n};\n\nexport const PortalProvider: React.FC = ({ children }) => {\n  const [portals, setPortals] = useState<PortalProps[]>([]);\n\n  return <PortalContext.Provider value={{ portals, setPortals }}>{children}</PortalContext.Provider>;\n};\n\nexport const Outlet: React.FC = () => {\n  const { portals } = usePortalContext();\n\n  return (\n    <React.Fragment>\n      {portals.map(({ key, children }) => (\n        <View key={key} pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n          {children}\n        </View>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport interface PortalProps {\n  key?: React.Key;\n\n  children?: React.ReactNode;\n}\n\nexport const Portal: React.FC<PortalProps> = ({ key, children }) => {\n  const { setPortals } = usePortalContext();\n\n  const _key = useMemo(() => key ?? `${Date.now() + Math.random()}`, [key]);\n\n  useEffect(() => {\n    setPortals((portals) => [...portals, { key: _key, children }]);\n\n    return () => {\n      setPortals((portals) => portals.filter((p) => p.key !== _key));\n    };\n  }, [_key, setPortals, children]);\n\n  return null;\n};\n"]}