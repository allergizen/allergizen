{"version":3,"sources":["WindowSizeClassContext.tsx"],"names":["defaultWindowSizes","base","sm","md","lg","xl","WindowSizeClassContext","useWindowSizeClass","WindowSizeClassProvider","windowSizes","children","width","windowSizeClass"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAMO,MAAMA,kBAA+B,GAAG;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,EAAE,EAAE,GAAf;AAAoBC,EAAAA,EAAE,EAAE,GAAxB;AAA6BC,EAAAA,EAAE,EAAE,IAAjC;AAAuCC,EAAAA,EAAE,EAAE;AAA3C,CAAxC;;AAMA,MAAMC,sBAAsB,gBAAG,0BAA+B,MAA/B,CAA/B;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM,uBAAWD,sBAAX,CAAjC;;;;AAEA,MAAME,uBAA+D,GAAG,QAGzE;AAAA,MAH0E;AAC9EC,IAAAA,WAAW,GAAGT,kBADgE;AAE9EU,IAAAA;AAF8E,GAG1E;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAY,uCAAlB;AAEA,QAAMC,eAAgC,GAAG,oBAAQ,MAAM;AACrD,QAAID,KAAK,IAAIF,WAAW,CAACR,IAArB,IAA6BU,KAAK,GAAGF,WAAW,CAACP,EAArD,EAAyD,OAAO,MAAP;AACzD,QAAIS,KAAK,IAAIF,WAAW,CAACP,EAArB,IAA2BS,KAAK,GAAGF,WAAW,CAACN,EAAnD,EAAuD,OAAO,IAAP;AACvD,QAAIQ,KAAK,IAAIF,WAAW,CAACN,EAArB,IAA2BQ,KAAK,GAAGF,WAAW,CAACL,EAAnD,EAAuD,OAAO,IAAP;AACvD,QAAIO,KAAK,IAAIF,WAAW,CAACL,EAArB,IAA2BO,KAAK,GAAGF,WAAW,CAACJ,EAAnD,EAAuD,OAAO,IAAP;AACvD,WAAO,IAAP;AACD,GANwC,EAMtC,CAACM,KAAD,EAAQF,WAAR,CANsC,CAAzC;AAQA,sBAAO,6BAAC,sBAAD,CAAwB,QAAxB;AAAiC,IAAA,KAAK,EAAEG;AAAxC,KAA0DF,QAA1D,CAAP;AACD,CAfM","sourcesContent":["import React, { createContext, useContext, useMemo } from 'react';\nimport { useWindowDimensions } from 'react-native';\n\nexport type WindowSizeClass = 'base' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport type WindowSizes = Record<WindowSizeClass, number>;\n\nexport const defaultWindowSizes: WindowSizes = { base: 0, sm: 600, md: 905, lg: 1240, xl: 1440 };\n\nexport interface WindowSizeClassProviderProps {\n  windowSizes?: WindowSizes;\n}\n\nexport const WindowSizeClassContext = createContext<WindowSizeClass>('base');\n\nexport const useWindowSizeClass = () => useContext(WindowSizeClassContext);\n\nexport const WindowSizeClassProvider: React.FC<WindowSizeClassProviderProps> = ({\n  windowSizes = defaultWindowSizes,\n  children,\n}) => {\n  const { width } = useWindowDimensions();\n\n  const windowSizeClass: WindowSizeClass = useMemo(() => {\n    if (width >= windowSizes.base && width < windowSizes.sm) return 'base';\n    if (width >= windowSizes.sm && width < windowSizes.md) return 'sm';\n    if (width >= windowSizes.md && width < windowSizes.lg) return 'md';\n    if (width >= windowSizes.lg && width < windowSizes.xl) return 'lg';\n    return 'xl';\n  }, [width, windowSizes]);\n\n  return <WindowSizeClassContext.Provider value={windowSizeClass}>{children}</WindowSizeClassContext.Provider>;\n};\n"]}