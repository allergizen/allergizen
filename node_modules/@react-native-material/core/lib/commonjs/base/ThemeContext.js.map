{"version":3,"sources":["ThemeContext.tsx"],"names":["ThemeContext","defaultTheme","useTheme","ThemeProvider","theme","children","colorScheme","value","darkTheme"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AA+EO,MAAMA,YAAY,gBAAG,0BAAqBC,0BAArB,CAArB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM,uBAAWF,YAAX,CAAvB;;;;AAEA,MAAMG,aAA2C,GAAG,QAAyB;AAAA,MAAxB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAwB;AAClF,QAAMC,WAAW,GAAG,kCAApB;AAEA,QAAMC,KAAK,GAAG,oBACZ,MAAOH,KAAK,GAAGA,KAAH,GAAWE,WAAW,KAAK,MAAhB,GAAyBE,uBAAzB,GAAqCP,0BADhD,EAEZ,CAACK,WAAD,EAAcF,KAAd,CAFY,CAAd;AAKA,sBAAO,6BAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEG;AAA9B,KAAsCF,QAAtC,CAAP;AACD,CATM","sourcesContent":["import React, { createContext, useContext, useMemo } from 'react';\nimport { ImageStyle, TextStyle, useColorScheme, ViewStyle } from 'react-native';\nimport { darkTheme, defaultTheme } from './defaultTheme';\n\nexport type ColorScheme = 'light' | 'dark';\n\nexport type Elevation =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport type Elevations = Record<Elevation, ViewStyle | TextStyle | ImageStyle>;\n\nexport type PaletteColorName = 'primary' | 'secondary' | 'background' | 'surface' | 'error' | string;\n\nexport type PaletteColor = { main: string; on: string };\n\nexport type Palette = Record<PaletteColorName, PaletteColor>;\n\nexport type ShapeCategory = 'small' | 'medium' | 'large';\n\nexport interface ShapeBorderRadius {\n  borderTopStartRadius: number;\n  borderTopEndRadius: number;\n  borderBottomStartRadius: number;\n  borderBottomEndRadius: number;\n}\n\nexport type Shapes = Record<ShapeCategory, ShapeBorderRadius>;\n\nexport type TypographyVariant =\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'subtitle1'\n  | 'subtitle2'\n  | 'body1'\n  | 'body2'\n  | 'button'\n  | 'caption'\n  | 'overline';\n\nexport type Typography = Record<TypographyVariant, TextStyle>;\n\nexport interface Theme {\n  colorScheme: ColorScheme;\n  elevations: Elevations;\n  palette: Palette;\n  shapes: Shapes;\n  typography: Typography;\n}\n\nexport interface ThemeProviderProps {\n  theme?: Theme;\n}\n\nexport const ThemeContext = createContext<Theme>(defaultTheme);\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ theme, children }) => {\n  const colorScheme = useColorScheme();\n\n  const value = useMemo(\n    () => (theme ? theme : colorScheme === 'dark' ? darkTheme : defaultTheme),\n    [colorScheme, theme]\n  );\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n};\n"]}