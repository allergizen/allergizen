{"version":3,"sources":["Stack.tsx"],"names":["Stack","spacing","divider","dividerStyle","shouldWrapChildren","childrenStyle","children","rest","spacingValue","direction","inline","spacingStyle","marginBottom","marginEnd","marginTop","marginStart","shouldUseChildren","validChildren","clones","map","child","index","key","isLast","length","wrappedChild","_child","dividerElement","isValidElement","clonedDivider","React","cloneElement","style","props","_divider","StackItem","HStack","reverse","VStack"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport type { FlexProps } from './Flex';\nimport Flex from './Flex';\nimport type { SelectorProps } from './Selector';\nimport Selector, { notLastChild } from './Selector';\nimport Divider from './Divider';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nexport interface StackProps extends FlexProps, SelectorProps {\n  /**\n   * The spacing between items in the stack.\n   *\n   * @default 0\n   */\n  spacing?: number;\n\n  /**\n   * If `true`, each stack item will show a divider.\n   *\n   * @default false\n   */\n  divider?: React.ReactElement;\n\n  /**\n   * A style object to apply to each divider.\n   */\n  dividerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * If `true`, the children will be wrapped in a `Box` and the `Box` will take the spacing properties.\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean;\n}\n\nconst Stack: React.FC<StackProps> = ({\n  spacing = 0,\n  divider = false,\n  dividerStyle,\n  shouldWrapChildren = false,\n  childrenStyle,\n  children,\n  ...rest\n}) => {\n  const spacingValue = useSpacing(spacing);\n\n  const direction = useMemo(() => {\n    return rest.inline ? 'row' : rest.direction || 'column';\n  }, [rest.inline, rest.direction]);\n\n  const spacingStyle = useMemo(() => {\n    switch (direction) {\n      case 'column':\n        return { marginBottom: spacingValue };\n      case 'row':\n        return { marginEnd: spacingValue };\n      case 'column-reverse':\n        return { marginTop: spacingValue };\n      case 'row-reverse':\n        return { marginStart: spacingValue };\n    }\n  }, [spacingValue, direction]);\n\n  const shouldUseChildren = !shouldWrapChildren && !divider;\n\n  const validChildren = getValidChildren(children);\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const key = typeof child.key !== 'undefined' ? child.key : index;\n        const isLast = index + 1 === validChildren.length;\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>;\n        const _child = shouldWrapChildren ? wrappedChild : child;\n\n        if (!divider) return _child;\n\n        const dividerElement = React.isValidElement(divider) ? (\n          divider\n        ) : (\n          <Divider\n            orientation={\n              direction === 'row' || direction === 'row-reverse'\n                ? 'vertical'\n                : 'horizontal'\n            }\n          />\n        );\n\n        const clonedDivider = React.cloneElement(dividerElement, {\n          key: `${key}-divider`,\n          style: [dividerElement.props.style, dividerStyle],\n        });\n\n        const _divider = isLast ? null : clonedDivider;\n\n        return [_child, _divider];\n      });\n\n  return (\n    <Flex {...rest}>\n      <Selector childrenStyle={[notLastChild(spacingStyle), childrenStyle]}>\n        {clones}\n      </Selector>\n    </Flex>\n  );\n};\n\nexport default Stack;\n\nconst StackItem: React.FC = (props) => <View {...props} />;\n\nexport interface HStackProps extends Omit<StackProps, 'inline' | 'direction'> {\n  reverse?: boolean;\n}\n\nexport const HStack: React.FC<HStackProps> = ({ reverse, ...rest }) => {\n  return <Stack {...rest} direction={reverse ? 'row-reverse' : 'row'} />;\n};\n\nexport interface VStackProps extends Omit<StackProps, 'inline' | 'direction'> {\n  reverse?: boolean;\n}\n\nexport const VStack: React.FC<VStackProps> = ({ reverse, ...rest }) => {\n  return <Stack {...rest} direction={reverse ? 'column-reverse' : 'column'} />;\n};\n"]}