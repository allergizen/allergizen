{"version":3,"sources":["Wrap.tsx"],"names":["Wrap","spacing","shouldWrapChildren","childrenStyle","children","rest","spacingValue","validChildren","clones","map","child","index","key","marginTop","marginStart","WrapItem","props"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;;;;;AAkBA,MAAMA,IAAyB,GAAG,QAM5B;AAAA,MAN6B;AACjCC,IAAAA,OAAO,GAAG,CADuB;AAEjCC,IAAAA,kBAAkB,GAAG,KAFY;AAGjCC,IAAAA,aAHiC;AAIjCC,IAAAA,QAJiC;AAKjC,OAAGC;AAL8B,GAM7B;AACJ,QAAMC,YAAY,GAAG,oCAAWL,OAAX,CAArB;AAEA,QAAMM,aAAa,GAAG,iCAAiBH,QAAjB,CAAtB;AAEA,QAAMI,MAAM,GAAG,CAACN,kBAAD,GACXK,aADW,GAEXA,aAAa,CAACE,GAAd,CAAkB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,UAAMC,GAAG,GAAG,OAAOF,KAAK,CAACE,GAAb,KAAqB,WAArB,GAAmCF,KAAK,CAACE,GAAzC,GAA+CD,KAA3D;AACA,wBAAO,6BAAC,QAAD;AAAU,MAAA,GAAG,EAAEC;AAAf,OAAqBF,KAArB,CAAP;AACD,GAHD,CAFJ;AAOA,sBACE,6BAAC,aAAD;AAAM,IAAA,EAAE,EAAE,CAACT,OAAX;AAAoB,IAAA,EAAE,EAAE,CAACA,OAAzB;AAAkC,IAAA,MAAM,MAAxC;AAAyC,IAAA,IAAI;AAA7C,KAAkDI,IAAlD,gBACE,6BAAC,iBAAD;AACE,IAAA,aAAa,EAAE,CACb;AAAEQ,MAAAA,SAAS,EAAEP,YAAb;AAA2BQ,MAAAA,WAAW,EAAER;AAAxC,KADa,EAEbH,aAFa;AADjB,KAMGK,MANH,CADF,CADF;AAYD,CA9BD;;eAgCeR,I;;;AAEf,MAAMe,QAAkB,GAAIC,KAAD,iBAAW,6BAAC,iBAAD,EAAUA,KAAV,CAAtC","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport type { FlexProps } from './Flex';\nimport Flex from './Flex';\nimport type { SelectorProps } from './Selector';\nimport Selector from './Selector';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nexport interface WrapProps extends FlexProps, SelectorProps {\n  /**\n   * The space between each child (even if it wraps).\n   *\n   * @default 0\n   */\n  spacing?: number;\n\n  /**\n   * If `true`, the children will be wrapped in a `Box` and the `Box` will take the spacing properties.\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean;\n}\n\nconst Wrap: React.FC<WrapProps> = ({\n  spacing = 0,\n  shouldWrapChildren = false,\n  childrenStyle,\n  children,\n  ...rest\n}) => {\n  const spacingValue = useSpacing(spacing);\n\n  const validChildren = getValidChildren(children);\n\n  const clones = !shouldWrapChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const key = typeof child.key !== 'undefined' ? child.key : index;\n        return <WrapItem key={key}>{child}</WrapItem>;\n      });\n\n  return (\n    <Flex mt={-spacing} ms={-spacing} inline wrap {...rest}>\n      <Selector\n        childrenStyle={[\n          { marginTop: spacingValue, marginStart: spacingValue },\n          childrenStyle,\n        ]}\n      >\n        {clones}\n      </Selector>\n    </Flex>\n  );\n};\n\nexport default Wrap;\n\nconst WrapItem: React.FC = (props) => <View {...props} />;\n"]}