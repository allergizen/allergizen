function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useMemo } from 'react';
import { View } from 'react-native';
import Flex from './Flex';
import Selector, { notLastChild } from './Selector';
import Divider from './Divider';
import { useSpacing } from './SpacingFuncContext';
import { getValidChildren } from './utilities';

const Stack = _ref => {
  let {
    spacing = 0,
    divider = false,
    dividerStyle,
    shouldWrapChildren = false,
    childrenStyle,
    children,
    ...rest
  } = _ref;
  const spacingValue = useSpacing(spacing);
  const direction = useMemo(() => {
    return rest.inline ? 'row' : rest.direction || 'column';
  }, [rest.inline, rest.direction]);
  const spacingStyle = useMemo(() => {
    switch (direction) {
      case 'column':
        return {
          marginBottom: spacingValue
        };

      case 'row':
        return {
          marginEnd: spacingValue
        };

      case 'column-reverse':
        return {
          marginTop: spacingValue
        };

      case 'row-reverse':
        return {
          marginStart: spacingValue
        };
    }
  }, [spacingValue, direction]);
  const shouldUseChildren = !shouldWrapChildren && !divider;
  const validChildren = getValidChildren(children);
  const clones = shouldUseChildren ? validChildren : validChildren.map((child, index) => {
    const key = typeof child.key !== 'undefined' ? child.key : index;
    const isLast = index + 1 === validChildren.length;
    const wrappedChild = /*#__PURE__*/React.createElement(StackItem, {
      key: key
    }, child);

    const _child = shouldWrapChildren ? wrappedChild : child;

    if (!divider) return _child;
    const dividerElement = /*#__PURE__*/React.isValidElement(divider) ? divider : /*#__PURE__*/React.createElement(Divider, {
      orientation: direction === 'row' || direction === 'row-reverse' ? 'vertical' : 'horizontal'
    });
    const clonedDivider = /*#__PURE__*/React.cloneElement(dividerElement, {
      key: `${key}-divider`,
      style: [dividerElement.props.style, dividerStyle]
    });

    const _divider = isLast ? null : clonedDivider;

    return [_child, _divider];
  });
  return /*#__PURE__*/React.createElement(Flex, rest, /*#__PURE__*/React.createElement(Selector, {
    childrenStyle: [notLastChild(spacingStyle), childrenStyle]
  }, clones));
};

export default Stack;

const StackItem = props => /*#__PURE__*/React.createElement(View, props);

export const HStack = _ref2 => {
  let {
    reverse,
    ...rest
  } = _ref2;
  return /*#__PURE__*/React.createElement(Stack, _extends({}, rest, {
    direction: reverse ? 'row-reverse' : 'row'
  }));
};
export const VStack = _ref3 => {
  let {
    reverse,
    ...rest
  } = _ref3;
  return /*#__PURE__*/React.createElement(Stack, _extends({}, rest, {
    direction: reverse ? 'column-reverse' : 'column'
  }));
};
//# sourceMappingURL=Stack.js.map