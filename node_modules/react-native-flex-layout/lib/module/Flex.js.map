{"version":3,"sources":["Flex.tsx"],"names":["React","useMemo","Box","Flex","fill","inline","center","direction","justify","items","self","content","wrap","basis","grow","shrink","style","rest","flex","undefined","flexDirection","justifyContent","alignItems","alignSelf","alignContent","flexWrap","flexStyle","flexBasis","flexGrow","flexShrink","Spacer","props"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport type { FlexStyle, ViewStyle } from 'react-native';\nimport type { BoxProps } from './Box';\nimport Box from './Box';\n\nexport interface FlexProps extends BoxProps {\n  /**\n   * Shorthand for the `flex` style property.\n   * If `true` is passed, the `flex` style property will be set to `1`.\n   */\n  fill?: boolean | number;\n\n  /**\n   * Shorthand for `{ flexDirection: \"row\" }`.\n   */\n  inline?: boolean;\n\n  /**\n   * Shorthand for `{ justifyContent: \"center\", alignItems: \"center\" }`.\n   */\n  center?: boolean;\n\n  /**\n   * Shorthand for the `flexDirection` style property.\n   */\n  direction?: FlexStyle['flexDirection'];\n\n  /**\n   * Shorthand for the `justifyContent` style property.\n   * If `center` prop is set to `true`, `justifyContent` will be forced to `center`.\n   */\n  justify?: 'start' | 'end' | 'center' | 'between' | 'around' | 'evenly';\n\n  /**\n   * Shorthand for the `alignItems` style property.\n   * If `center` prop is set to `true`, `alignItems` will be forced to `center`.\n   */\n  items?: 'start' | 'end' | 'center' | 'stretch' | 'baseline';\n\n  /**\n   * Shorthand for the `alignSelf` style property.\n   */\n  self?: 'auto' | 'start' | 'end' | 'center' | 'stretch' | 'baseline';\n\n  /**\n   * Shorthand for the `alignContent` style property.\n   */\n  content?: 'start' | 'end' | 'center' | 'stretch' | 'between' | 'around';\n\n  /**\n   * Shorthand for the `flexWrap` style property.\n   * If `true` is passed, the `flexWrap` style property will be set to `wrap`.\n   */\n  wrap?: boolean | FlexStyle['flexWrap'];\n\n  /**\n   * Shorthand for the `flexBasis` style property.\n   */\n  basis?: FlexStyle['flexBasis'];\n\n  /**\n   * Shorthand for the `flexGrow` style property.\n   */\n  grow?: FlexStyle['flexGrow'];\n\n  /**\n   * Shorthand for the `flexShrink` style property.\n   */\n  shrink?: FlexStyle['flexShrink'];\n}\n\nconst Flex: React.FC<FlexProps> = ({\n  fill,\n  inline,\n  center,\n  direction,\n  justify,\n  items,\n  self,\n  content,\n  wrap,\n  basis,\n  grow,\n  shrink,\n  style,\n  ...rest\n}) => {\n  const flex = useMemo(\n    () => (typeof fill === 'boolean' ? (fill ? 1 : undefined) : fill),\n    [fill]\n  );\n\n  const flexDirection = useMemo(\n    () => (inline ? 'row' : direction),\n    [inline, direction]\n  );\n\n  const justifyContent = useMemo(() => {\n    if (center) return 'center';\n    switch (justify) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      case 'evenly':\n        return 'space-evenly';\n      default:\n        return justify;\n    }\n  }, [center, justify]);\n\n  const alignItems = useMemo(() => {\n    if (center) return 'center';\n    switch (items) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return items;\n    }\n  }, [center, items]);\n\n  const alignSelf = useMemo(() => {\n    switch (self) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return self;\n    }\n  }, [self]);\n\n  const alignContent = useMemo(() => {\n    switch (content) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      default:\n        return content;\n    }\n  }, [content]);\n\n  const flexWrap = useMemo(\n    () => (typeof wrap === 'boolean' ? (wrap ? 'wrap' : undefined) : wrap),\n    [wrap]\n  );\n\n  const flexStyle = useMemo(\n    (): ViewStyle => ({\n      flex,\n      flexDirection,\n      justifyContent,\n      alignItems,\n      alignSelf,\n      alignContent,\n      flexWrap,\n      flexBasis: basis,\n      flexGrow: grow,\n      flexShrink: shrink,\n    }),\n    [\n      flex,\n      flexDirection,\n      justifyContent,\n      alignItems,\n      alignSelf,\n      alignContent,\n      flexWrap,\n      basis,\n      grow,\n      shrink,\n    ]\n  );\n\n  return <Box style={[flexStyle, style]} {...rest} />;\n};\n\nexport default Flex;\n\nexport const Spacer: React.FC<FlexProps> = (props) => {\n  return <Flex fill self=\"stretch\" {...props} />;\n};\n"]}