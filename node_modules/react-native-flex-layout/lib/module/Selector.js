import React, { useMemo } from 'react';
import { getValidChildren } from './utilities';

const Selector = _ref => {
  let {
    childrenStyle,
    children
  } = _ref;
  const styles = useMemo(() => Array.isArray(childrenStyle) ? childrenStyle.flat(Infinity) : [childrenStyle], [childrenStyle]);
  const validChildren = getValidChildren(children);
  return /*#__PURE__*/React.createElement(React.Fragment, null, validChildren.map((child, index) => /*#__PURE__*/React.cloneElement(child, {
    style: [child.props.style, styles.map(style => typeof style === 'function' ? style(index, validChildren.length) : style)]
  })));
};

export default Selector;
export const select = selector => style => (index, length) => selector(index, length) ? style : null;
export const firstChild = select(index => index === 0);
export const notFirstChild = select(index => index !== 0);
export const lastChild = select((index, length) => index === length - 1);
export const notLastChild = select((index, length) => index !== length - 1);
export const even = select(index => index % 2 === 0);
export const odd = select(index => index % 2 !== 0);
//# sourceMappingURL=Selector.js.map