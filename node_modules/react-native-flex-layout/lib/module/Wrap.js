function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { View } from 'react-native';
import Flex from './Flex';
import Selector from './Selector';
import { useSpacing } from './SpacingFuncContext';
import { getValidChildren } from './utilities';

const Wrap = _ref => {
  let {
    spacing = 0,
    shouldWrapChildren = false,
    childrenStyle,
    children,
    ...rest
  } = _ref;
  const spacingValue = useSpacing(spacing);
  const validChildren = getValidChildren(children);
  const clones = !shouldWrapChildren ? validChildren : validChildren.map((child, index) => {
    const key = typeof child.key !== 'undefined' ? child.key : index;
    return /*#__PURE__*/React.createElement(WrapItem, {
      key: key
    }, child);
  });
  return /*#__PURE__*/React.createElement(Flex, _extends({
    mt: -spacing,
    ms: -spacing,
    inline: true,
    wrap: true
  }, rest), /*#__PURE__*/React.createElement(Selector, {
    childrenStyle: [{
      marginTop: spacingValue,
      marginStart: spacingValue
    }, childrenStyle]
  }, clones));
};

export default Wrap;

const WrapItem = props => /*#__PURE__*/React.createElement(View, props);
//# sourceMappingURL=Wrap.js.map