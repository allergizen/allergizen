function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useMemo } from 'react';
import Box from './Box';

const Flex = _ref => {
  let {
    fill,
    inline,
    center,
    direction,
    justify,
    items,
    self,
    content,
    wrap,
    basis,
    grow,
    shrink,
    style,
    ...rest
  } = _ref;
  const flex = useMemo(() => typeof fill === 'boolean' ? fill ? 1 : undefined : fill, [fill]);
  const flexDirection = useMemo(() => inline ? 'row' : direction, [inline, direction]);
  const justifyContent = useMemo(() => {
    if (center) return 'center';

    switch (justify) {
      case 'start':
        return 'flex-start';

      case 'end':
        return 'flex-end';

      case 'between':
        return 'space-between';

      case 'around':
        return 'space-around';

      case 'evenly':
        return 'space-evenly';

      default:
        return justify;
    }
  }, [center, justify]);
  const alignItems = useMemo(() => {
    if (center) return 'center';

    switch (items) {
      case 'start':
        return 'flex-start';

      case 'end':
        return 'flex-end';

      default:
        return items;
    }
  }, [center, items]);
  const alignSelf = useMemo(() => {
    switch (self) {
      case 'start':
        return 'flex-start';

      case 'end':
        return 'flex-end';

      default:
        return self;
    }
  }, [self]);
  const alignContent = useMemo(() => {
    switch (content) {
      case 'start':
        return 'flex-start';

      case 'end':
        return 'flex-end';

      case 'between':
        return 'space-between';

      case 'around':
        return 'space-around';

      default:
        return content;
    }
  }, [content]);
  const flexWrap = useMemo(() => typeof wrap === 'boolean' ? wrap ? 'wrap' : undefined : wrap, [wrap]);
  const flexStyle = useMemo(() => ({
    flex,
    flexDirection,
    justifyContent,
    alignItems,
    alignSelf,
    alignContent,
    flexWrap,
    flexBasis: basis,
    flexGrow: grow,
    flexShrink: shrink
  }), [flex, flexDirection, justifyContent, alignItems, alignSelf, alignContent, flexWrap, basis, grow, shrink]);
  return /*#__PURE__*/React.createElement(Box, _extends({
    style: [flexStyle, style]
  }, rest));
};

export default Flex;
export const Spacer = props => {
  return /*#__PURE__*/React.createElement(Flex, _extends({
    fill: true,
    self: "stretch"
  }, props));
};
//# sourceMappingURL=Flex.js.map